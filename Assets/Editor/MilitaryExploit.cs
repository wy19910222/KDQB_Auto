/*
 * @Author: wangyun
 * @CreateTime: 2023-11-20 18:37:42 092
 * @LastEditor: wangyun
 * @EditTime: 2023-11-20 18:37:42 100
 */

using System;
using System.Collections;
using UnityEditor;
using UnityEngine;

public class MilitaryExploitConfig : PrefsEditorWindow<MilitaryExploit> {
	[MenuItem("Tools_Window/War/MilitaryExploit")]
	private static void Open() {
		GetWindow<MilitaryExploitConfig>("刷军功").Show();
	}

	private EditorCoroutine m_Co;
	
	private void OnGUI() {
		DrawVector2IntField(EditorGUIUtility.TrTempContent("目标建筑屏幕坐标"), MilitaryExploit.TARGET_POS, pos => MilitaryExploit.TARGET_POS = pos);
		DrawVector2IntField(EditorGUIUtility.TrTempContent("攻击按钮屏幕坐标"), MilitaryExploit.ATTACK_BTN_POS, pos => MilitaryExploit.ATTACK_BTN_POS = pos);
		GUILayout.Space(5F);
		if (MilitaryExploit.IsRunning) {
			if (GUILayout.Button("关闭")) {
				IsRunning = false;
			}
		} else {
			if (GUILayout.Button("开启")) {
				IsRunning = true;
			}
		}
	}

	private void DrawVector2IntField(GUIContent label, Vector2Int pos, Action<Vector2Int> callback) {
		if (callback != null) {
			EditorGUILayout.BeginHorizontal();
			GUILayout.Space(((GUIStyle) "Label").CalcSize(label).x + 10F);
			if (GUILayout.Button("屏幕点选", GUILayout.Width(80F))) {
				if (m_Co != null) {
					this.StopCoroutine(m_Co);
				}
				m_Co = this.Wait(() => {
					callback(Operation.GetMousePos());
					return MouseUtils.IsLeftDown();
				}, () => {
					m_Co = null;
				});
			}
			EditorGUILayout.EndHorizontal();
			GUILayout.Space(-EditorGUIUtility.singleLineHeight - 3F);
			callback(EditorGUILayout.Vector2IntField(label, pos));
		}
	}
	
	private void Update() {
		Repaint();
	}
}

public enum VKCode {
	Q = 81,
	W = 87,
	E = 69,
	R = 82,
	F1 = 112,
	F2 = 113,
	F3 = 114,
	F4 = 115,
}

public class MilitaryExploit {
	public static Vector2Int TARGET_POS = new Vector2Int(960, 420);
	public static Vector2Int ATTACK_BTN_POS = new Vector2Int(960, 680);
	
	public static bool IsRunning;

	[MenuItem("Tools_Task/StartMilitaryExploit", priority = -1)]
	private static void Enable() {
		Disable();
		Debug.Log($"刷军功键盘点击已开启");
		IsRunning = true;
		KeyboardUtils.OnKeyUp = OnKeyUp;
		KeyboardUtils.Hook();
	}

	[MenuItem("Tools_Task/StopMilitaryExploit", priority = -1)]
	private static void Disable() {
		if (IsRunning) {
			KeyboardUtils.Unhook();
			IsRunning = false;
			Debug.Log("刷军功键盘点击已关闭");
		}
	}

	private static void OnKeyUp(int vkCode) {
		switch ((VKCode) vkCode) {
			case VKCode.F1: {
				EditorCoroutineManager.StartCoroutine(OnF1());
				break;
			}
			case VKCode.F2: {
				EditorCoroutineManager.StartCoroutine(OnF2());
				break;
			}
			case VKCode.F3: {
				break;
			}
			case VKCode.F4: {
				break;
			}
		}
	}
	private static IEnumerator OnF1() {
		switch (Recognize.CurrentScene) {
			case Recognize.Scene.OUTSIDE:
				Operation.Click(TARGET_POS.x, TARGET_POS.y);	// 选中目标电站（每次使用前需调整坐标）
				yield return new EditorWaitForSeconds(0.1F);
				Operation.Click(ATTACK_BTN_POS.x, ATTACK_BTN_POS.y);	// 攻击按钮（每次使用前需调整坐标）
				yield return new EditorWaitForSeconds(0.2F);
				Operation.Click(1210, 820);	// 一键上阵按钮
				break;
			case Recognize.Scene.FIGHTING:
				yield return null;
				Operation.Click(960, 460);	// 出征按钮
				break;
		}
	}

	private static IEnumerator OnF2() {
		switch (Recognize.CurrentScene) {
			case Recognize.Scene.OUTSIDE:
				Operation.Click(TARGET_POS.x, TARGET_POS.y);	// 选中目标电站（每次使用前需调整坐标）
				yield return new EditorWaitForSeconds(0.1F);
				Operation.Click(ATTACK_BTN_POS.x, ATTACK_BTN_POS.y);	// 攻击按钮（每次使用前需调整坐标）
				break;
			case Recognize.Scene.FIGHTING:
				yield return null;
				Operation.Click(960, 460);	// 出征按钮
				break;
		}
	}
}
