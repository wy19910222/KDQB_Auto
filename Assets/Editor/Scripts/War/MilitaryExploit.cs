/*
 * @Author: wangyun
 * @CreateTime: 2023-11-20 18:37:42 092
 * @LastEditor: wangyun
 * @EditTime: 2023-11-20 18:37:42 100
 */

using System.Collections;
using UnityEditor;
using UnityEngine;

public class MilitaryExploit {
	public static Vector2Int TARGET_POS = new Vector2Int(960, 420);
	public static Vector2Int ATTACK_BTN_POS = new Vector2Int(960, 680);
	
	public static bool IsRunning;

	[MenuItem("Tools_Task/StartMilitaryExploit", priority = -1)]
	private static void Enable() {
		Disable();
		Debug.Log($"刷军功键盘点击已开启");
		IsRunning = true;
		KeyboardUtils.OnKeyUp += OnKeyUp;
		KeyboardUtils.Hook();
	}

	[MenuItem("Tools_Task/StopMilitaryExploit", priority = -1)]
	private static void Disable() {
		if (IsRunning) {
			KeyboardUtils.Unhook();
			KeyboardUtils.OnKeyUp -= OnKeyUp;
			IsRunning = false;
			Debug.Log("刷军功键盘点击已关闭");
		}
	}

	private static void OnKeyUp(int vkCode) {
		switch ((KeyboardUtils.VKCode) vkCode) {
			case KeyboardUtils.VKCode.F1: {
				EditorCoroutineManager.StartCoroutine(OnF1());
				break;
			}
			case KeyboardUtils.VKCode.F2: {
				EditorCoroutineManager.StartCoroutine(OnF2());
				break;
			}
			case KeyboardUtils.VKCode.F3: {
				EditorCoroutineManager.StartCoroutine(OnF3());
				break;
			}
			case KeyboardUtils.VKCode.F4: {
				EditorCoroutineManager.StartCoroutine(OnF4());
				break;
			}
			case KeyboardUtils.VKCode.F5: {
				EditorCoroutineManager.StartCoroutine(OnF5());
				break;
			}
			case KeyboardUtils.VKCode.F6: {
				m_Clicking = true;
				EditorCoroutineManager.StartCoroutine(OnF6());
				break;
			}
			case KeyboardUtils.VKCode.F7: {
				m_Clicking = false;
				break;
			}
		}
	}
	private static IEnumerator OnF1() {
		switch (Recognize.CurrentScene) {
			case Recognize.Scene.OUTSIDE_NEARBY:
			case Recognize.Scene.OUTSIDE_FARAWAY:
				Operation.Click(TARGET_POS.x, TARGET_POS.y);	// 选中目标电站（每次使用前需调整坐标）
				yield return new EditorWaitForSeconds(0.1F);
				Operation.Click(ATTACK_BTN_POS.x, ATTACK_BTN_POS.y);	// 攻击按钮（每次使用前需调整坐标）
				yield return new EditorWaitForSeconds(0.2F);
				Operation.Click(1210, 820);	// 一键上阵按钮
				break;
			case Recognize.Scene.FIGHTING_MARCH:
				yield return null;
				Operation.Click(960, 460);	// 出征按钮
				break;
		}
	}

	private static IEnumerator OnF2() {
		switch (Recognize.CurrentScene) {
			case Recognize.Scene.OUTSIDE_NEARBY:
			case Recognize.Scene.OUTSIDE_FARAWAY:
				Operation.Click(TARGET_POS.x, TARGET_POS.y);	// 选中目标电站（每次使用前需调整坐标）
				yield return new EditorWaitForSeconds(0.1F);
				Operation.Click(ATTACK_BTN_POS.x, ATTACK_BTN_POS.y);	// 攻击按钮（每次使用前需调整坐标）
				break;
			case Recognize.Scene.FIGHTING_MARCH:
				yield return null;
				Operation.Click(960, 460);	// 出征按钮
				break;
		}
	}

	private static IEnumerator OnF3() {
		switch (Recognize.CurrentScene) {
			case Recognize.Scene.FIGHTING_MARCH:
				yield return null;
				Operation.Click(Mathf.RoundToInt(1144 + 37.2F * 3), 870);	// 编队3
				break;
		}
	}

	private static IEnumerator OnF4() {
		switch (Recognize.CurrentScene) {
			case Recognize.Scene.FIGHTING_MARCH:
				yield return null;
				Operation.Click(960, 460);	// 出征按钮
				break;
		}
	}

	private static IEnumerator OnF5() {
		switch (Recognize.CurrentScene) {
			case Recognize.Scene.FIGHTING_MARCH:
				yield return null;
				Operation.Click(Mathf.RoundToInt(1144 + 37.2F * 5), 870);	// 编队5
				break;
		}
	}

	private static bool m_Clicking;
	private static IEnumerator OnF6() {
		while (m_Clicking) {
			yield return null;
			Vector2Int pos = Operation.GetMousePos();
			Operation.Click(pos.x, pos.y);
		}
	}
}
